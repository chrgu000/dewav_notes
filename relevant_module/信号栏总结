信号栏总结：
1、由PhoneStatusBar.java的makeStatusBarView()方法来加载布局。由于在Android系统中由三处地方会使用信号栏(状态栏、锁屏界面下的状态栏以及下拉通知栏的快捷设置区域),这三个引用处分别是status_bar.xml、keyguard_status_bar.xml、status_bar_expanded_header.xml)，实例化三个对象，并在这个方法中为每一个SignalClusterView.java对象绑定两个控制器对象，NetworkControllerImpl.java、SecurityControllerImpl.java;
2、NetworkControllerImpl.java对象主要是负责作为信号栏数据控制类,继承于BroadcastReceiver，负责监控 wifi, SIM卡状态, service state ,飞行模式等。
SecurityControllerImpl.java对象主要是负责作为用户切换时信号栏数据控制类，负责监控用户切换时的网络状态改变回调;
3、NetworkControllerImpl.java通过CallbackHandler.java将它自己和SignalClusterView.java联系起来，中间通过在CallbackHandler.java的对象中调用SignalClusterView.java的方法来实现NetworkControllerImpl.java对SignalClusterView.java控制通信;
另一方面SignalClusterView.java通过直接实现SecurityController.java的接口来完成通信功能，在SecurityControllerImpl.java通过直接回调onStateChanged()方法通知SignalClusterView.java进行相应的操作;
4、NetworkControllerImpl.java是继承于BroadcastReceiver，通过监听系统广播等来监控SIM卡事件变化等。当插入SIM卡时会获取当前SIM卡的订阅信息集合，然后遍历此集合，为订阅信息再设置一个MobileSignalController.java。
5、MobileSignalController.java类则主要是实现PhoneStateListener接口用来监听service state、信号强度、通话状态、移动数据连接状态，设置相应的显示图标。然后将这些状态和图标显示属性通过CallbackHandler.java传递给SignalClusterView.java对象中。
6、SignalClusterView.java通过调用apply()方法和内部类PhoneState的apply()方法来完成最终的界面刷新。

Android中的信号强度上报与显示完整流程() 
GsmServiceStateTracker-->Phone.notifySignalStrength-->DefaultPhoneNotifier.notifySignalStrength-->TelephonyRegistry.notifySignalStrengthForPhoneId

Android6.0 SystemUI之网络信号栏显示刷新 
