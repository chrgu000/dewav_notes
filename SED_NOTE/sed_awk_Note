/**************************SED OPERATE START**************************************
删除命令d
sed '/^$/d' file  删除空行

sed '2,$d' file   删除第二行到末尾的所有行

替换命令s　
sed 's/book/books/' file

-n选项和p命令一起使用表示只打印那些发生替换的行：
sed -n 's/test/TEST/p' file

直接编辑文件选项-i，会匹配file文件中每一行的第一个book替换为books
sed -i 's/book/books/g' file
sed -i 's/book/books/2g' file 第二行开始匹配

子串匹配标记\1    \(xxxx\)
echo this is digit 7 in a number | sed 's/digit \([0-9]\)/\1/' 
this is 7 in a number
命令中 digit 7，被替换成了 7。样式匹配到的子串是 7，\(..\) 用于匹配子串，对于匹配到的第一个子串就标记为 \1，依此类推匹配到的第二个结果就是 \2

sed -n '/Good/p' text2　搜索列出包含Good的行
sed -n '2,$p' text2 　显示从第二行到最后一行

已匹配子符串标记＆
sed 's/^192.168.0.1/&localhost/' file 192.168.0.1localhost

正则表达式 \w\+ 匹配每一个单词，使用 [&] 替换它，& 对应于之前所匹配到的单词： 
echo this is a test line | sed 's/\w\+/[&]/g'
[this] [is] [a] [test] [line]

echo  456 BBB | sed 's/\([0-9]\+\) \([A-Z]\+\)/\2 \1/'

sed 's/ //2'替换第二个匹配的字符

删除首尾空格
sed 's/^[ \t]*//' | sed  's/[ \t]*$//'

/**************************SED OPERATE  END**************************************

/**************************AWK START**************************************
awk的原理是必须的：读入有'\n'换行符分割的一条记录，将记录按指定的域分隔符划分域，$0表示所有域, $1表示第一个域, $n表示第n个域。 默认域分隔符是空格键或tab键。

test.txt中的内容：
xxx     Math English C++  Experiment
Monkey  100   90     95   Good
Cat     80    100    60   Perfect
Dog     90    60     70   Great
Tiger   95    85     90   Fantastic

awk '{print $2}' test.txt  (awk '{if(1<2) printf("%s\n", $2)}' test.txt) 
Math  
100  
80  
90  
95

awk的一般格式：awk [option]  'pattern {action}' test.txt,  比如上面的awk '{print $2}' test.txt, 此时，采用默认选项， 且条件永远为真。

xxx|Math|English|C++|Experiment  
Monkey|100|90|95|Good  
Cat|80|100|60|Perfect  
Dog|90|60|70|Great  
Tiger|95|85|90|Fantastic 

$ awk -F "|" '{print $2}' a.txt  
Math  
100  
80  
90  
95

NR是当前的行数 NF 表示当前行有多少个段 (number of row/number of field) -F 指定分割符
awk '{print $1 "\t lines: " NR "\t columes: " NF}'  在awk内的NR，NF等变量要大写，且不需要 $
变量FS 代表目前的分割字符，默认是空格键
cat /etc/passwd | awk '{FS=":"} $3 < 10 {print $1 "\t" $3}'   查阅第三列小于10的数据，同时列出第一字段和第三字段。
但是第一行会显示不如我们所想。

cat /etc/passwd | awk 'BEGIN {FS=":"} $3 < 10 {print $1 "\t" $3}' 可以让第一行也如我们所要求
**************************AWK END**************************************/

/**************************tr命令 START**************************************
echo "HELLO WORLD" | tr 'A-Z' 'a-z'  将输入字符由大写转换为小写：

echo "hello 123 world 456" | tr -d '0-9' 使用tr删除字符：
hello world

echo aa.,a 1 b#$bb 2 c*/cc 3 ddd 4 | tr -d -c '0-9 \n' 字符集补集，从输入文本中将不在补集中的所有字符删除：
1  2  3  4

echo "thissss is a text    linnnnnnne." | tr -s ' sn' 用tr压缩字符，可以压缩输入中重复的字符
this is a text line.
**************************tr命令 end********************************/



1. cut [选项] 文件名

-f  列号　　#提取第几列（分隔符默认为\t）

-d  分隔符　　#指定分隔符

例如：cut -f 2 a.txt　　#截取文件a.txt内容的第二列（列号从1开始）

　　　cut -f 2,4 a.txt　　#截取文件a.txt内容的第二列和第四列

　　　cut -d  ":"  -f 1,3 /etc/passwd　　#截取文件passwd文件的第1列和第三列，以:分割取其中的第一列和第三列
